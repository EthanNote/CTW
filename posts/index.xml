<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Code The World</title>
    <link>https://ethannote.github.io/CTW/posts/</link>
    <description>Recent content in Posts on Code The World</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Fri, 21 Sep 2018 18:09:31 +0800</lastBuildDate>
    
	<atom:link href="https://ethannote.github.io/CTW/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>XML Http Request</title>
      <link>https://ethannote.github.io/CTW/posts/xml-http-request/</link>
      <pubDate>Fri, 21 Sep 2018 18:09:31 +0800</pubDate>
      
      <guid>https://ethannote.github.io/CTW/posts/xml-http-request/</guid>
      <description> Loading progress Using &amp;lsquo;onprogress&amp;rsquo; callback
https://www.cnblogs.com/gaohj/p/7017722.html
   var xhr = createXHR(); xhr.onload = function(event){ if((xhr.status = 200 &amp;&amp; xhr.status up   </description>
    </item>
    
    <item>
      <title>Vue</title>
      <link>https://ethannote.github.io/CTW/posts/vue/</link>
      <pubDate>Tue, 11 Sep 2018 00:55:08 +0800</pubDate>
      
      <guid>https://ethannote.github.io/CTW/posts/vue/</guid>
      <description>数据绑定、计算属性      v-bind:style 数据绑定为计算属性时，计算属性函数的返回值为Object，采用Object的 key value 表示 style。而不能返回style 字符串。
 var vm = new Vue({ el: &#34;#post_display&#34;, data: { posts: [], rows: 4, }, computed: { postRows: function () { var result = []; var i = 0; while (1) { var nextLine = this.posts.slice(this.rows * i, this.rows * (i + 1)); if (nextLine.length  方法    const vm = new Vue({ el: &#34;</description>
    </item>
    
    <item>
      <title>C&#43;&#43; Virtual Table</title>
      <link>https://ethannote.github.io/CTW/posts/virtual_table/</link>
      <pubDate>Thu, 06 Sep 2018 12:27:47 +0800</pubDate>
      
      <guid>https://ethannote.github.io/CTW/posts/virtual_table/</guid>
      <description> 内存 https://www.cnblogs.com/wangxiaobao/p/5850949.html
class A { public: virtual void vfunc1(); virtual void vfunc2(); void func1(); void func2(); virtual ~A(); private: int m_data1, m_data2; }; class B : A { public: virtual void vfunc1();; void func2(); virtual ~B(); private: int m_data3; }; class C : B { public: virtual void vfunc1(); void func(); private: int m_data1, m_data4; };  </description>
    </item>
    
    <item>
      <title>Tcp</title>
      <link>https://ethannote.github.io/CTW/posts/tcp/</link>
      <pubDate>Wed, 05 Sep 2018 22:21:16 +0800</pubDate>
      
      <guid>https://ethannote.github.io/CTW/posts/tcp/</guid>
      <description>https://www.cnblogs.com/Andya/p/7272462.html
TCP 状态机 三次握手过程 第一次握手：起初两端都处于CLOSED关闭状态，Client将标志位SYN置为1，随机产生一个值seq=x，并将该数据包发送给Server，Client进入SYN-SENT状态，等待Server确认；
第二次握手：Server收到数据包后由标志位SYN=1得知Client请求建立连接，Server将标志位SYN和ACK都置为1，ack=x+1，随机产生一个值seq=y，并将该数据包发送给Client以确认连接请求，Server进入SYN-RCVD状态，此时操作系统为该TCP连接分配TCP缓存和变量；
第三次握手：Client收到确认后，检查ack是否为x+1，ACK是否为1，如果正确则将标志位ACK置为1，ack=y+1，并且此时操作系统为该TCP连接分配TCP缓存和变量，并将该数据包发送给Server，Server检查ack是否为y+1，ACK是否为1，如果正确则连接建立成功，Client和Server进入ESTABLISHED状态，完成三次握手，随后Client和Server就可以开始传输数据。
起初A和B都处于CLOSED状态——B创建TCB，处于LISTEN状态，等待A请求——A创建TCB，发送连接请求（SYN=1，seq=x），进入SYN-SENT状态——B收到连接请求，向A发送确认（SYN=ACK=1，确认号ack=x+1，初始序号seq=y），进入SYN-RCVD状态——A收到B的确认后，给B发出确认（ACK=1，ack=y+1，seq=x+1），A进入ESTABLISHED状态——B收到A的确认后，进入ESTABLISHED状态。
为什么A还要发送一次确认呢？可以二次握手吗？
答：主要为了防止已失效的连接请求报文段突然又传送到了B，因而产生错误。如A发出连接请求，但因连接请求报文丢失而未收到确认，于是A再重传一次连接请求。后来收到了确认，建立了连接。数据传输完毕后，就释放了连接，A工发出了两个连接请求报文段，其中第一个丢失，第二个到达了B，但是第一个丢失的报文段只是在某些网络结点长时间滞留了，延误到连接释放以后的某个时间才到达B，此时B误认为A又发出一次新的连接请求，于是就向A发出确认报文段，同意建立连接，不采用三次握手，只要B发出确认，就建立新的连接了，此时A不理睬B的确认且不发送数据，则B一致等待A发送数据，浪费资源。
四次挥手过程 1）A的应用进程先向其TCP发出连接释放报文段（FIN=1，序号seq=u），并停止再发送数据，主动关闭TCP连接，进入FIN-WAIT-1（终止等待1）状态，等待B的确认。
2）B收到连接释放报文段后即发出确认报文段，（ACK=1，确认号ack=u+1，序号seq=v），B进入CLOSE-WAIT（关闭等待）状态，此时的TCP处于半关闭状态，A到B的连接释放。
3）A收到B的确认后，进入FIN-WAIT-2（终止等待2）状态，等待B发出的连接释放报文段。
4）B没有要向A发出的数据，B发出连接释放报文段（FIN=1，ACK=1，序号seq=w，确认号ack=u+1），B进入LAST-ACK（最后确认）状态，等待A的确认。
5）A收到B的连接释放报文段后，对此发出确认报文段（ACK=1，seq=u+1，ack=w+1），A进入TIME-WAIT（时间等待）状态。此时TCP未释放掉，需要经过时间等待计时器设置的时间2MSL后，A才进入CLOSED状态。
总结四次挥手过程：
起初A和B处于ESTABLISHED状态——A发出连接释放报文段并处于FIN-WAIT-1状态——B发出确认报文段且进入CLOSE-WAIT状态——A收到确认后，进入FIN-WAIT-2状态，等待B的连接释放报文段——B没有要向A发出的数据，B发出连接释放报文段且进入LAST-ACK状态——A发出确认报文段且进入TIME-WAIT状态——B收到确认报文段后进入CLOSED状态——A经过等待计时器时间2MSL后，进入CLOSED状态。
为什么A在TIME-WAIT状态必须等待2MSL的时间？
MSL最长报文段寿命Maximum Segment Lifetime，MSL=2
答：　两个理由：1）保证A发送的最后一个ACK报文段能够到达B。2）防止“已失效的连接请求报文段”出现在本连接中。
1）这个ACK报文段有可能丢失，使得处于LAST-ACK状态的B收不到对已发送的FIN+ACK报文段的确认，B超时重传FIN+ACK报文段，而A能在2MSL时间内收到这个重传的FIN+ACK报文段，接着A重传一次确认，重新启动2MSL计时器，最后A和B都进入到CLOSED状态，若A在TIME-WAIT状态不等待一段时间，而是发送完ACK报文段后立即释放连接，则无法收到B重传的FIN+ACK报文段，所以不会再发送一次确认报文段，则B无法正常进入到CLOSED状态。 2）A在发送完最后一个ACK报文段后，再经过2MSL，就可以使本连接持续的时间内所产生的所有报文段都从网络中消失，使下一个新的连接中不会出现这种旧的连接请求报文段。
为什么连接的时候是三次握手，关闭的时候却是四次握手？
答：因为当Server端收到Client端的SYN连接请求报文后，可以直接发送SYN+ACK报文。其中ACK报文是用来应答的，SYN报文是用来同步的。但是关闭连接时，当Server端收到FIN报文时，很可能并不会立即关闭SOCKET，所以只能先回复一个ACK报文，告诉Client端，&amp;rdquo;你发的FIN报文我收到了&amp;rdquo;。只有等到我Server端所有的报文都发送完了，我才能发送FIN报文，因此不能一起发送。故需要四步握手。
为什么TIME_WAIT状态需要经过2MSL(最大报文段生存时间)才能返回到CLOSE状态？
答：虽然按道理，四个报文都发送完毕，我们可以直接进入CLOSE状态了，但是我们必须假象网络是不可靠的，有可以最后一个ACK丢失。所以TIME_WAIT状态就是用来重发可能丢失的ACK报文。</description>
    </item>
    
    <item>
      <title>R-B Tree</title>
      <link>https://ethannote.github.io/CTW/posts/r-b_tree/</link>
      <pubDate>Wed, 05 Sep 2018 13:14:01 +0800</pubDate>
      
      <guid>https://ethannote.github.io/CTW/posts/r-b_tree/</guid>
      <description>http://www.cnblogs.com/skywang12345/p/3245399.html
简介 R-B Tree，全称是Red-Black Tree，又称为“红黑树”，它一种特殊的二叉查找树。红黑树的每个节点上都有存储位表示节点的颜色，可以是红(Red)或黑(Black)。
红黑树的应用比较广泛，主要是用它来存储有序的数据，它的时间复杂度是O(lgn)，效率非常之高。 例如，Java集合中的TreeSet和TreeMap，C++ STL中的set、map，以及Linux虚拟内存的管理，都是通过红黑树去实现的。
红黑树的时间复杂度为: O(lgn) &amp;lt;==逆否命题==&amp;gt; 高度为h的红黑树，它的包含的内节点个数至少为 $ 2^{h/2}-1 $ 个
性质  每个结点要么是红的要么是黑的。  根结点是黑的。  每个叶结点（叶结点即指树尾端NIL指针或NULL结点）都是黑的。  如果一个结点是红的，那么它的两个儿子都是黑的。  对于任意结点而言，其到叶结点树尾端NIL指针的每条路径都包含相同数目的黑结点。   插入 首先，将红黑树当作一颗二叉查找树，将节点插入；然后，将节点着色为红色；最后，通过旋转和重新着色等方法来修正该树，使之重新成为一颗红黑树。
RB-INSERT(T, z) y ← nil[T] // 新建节点“y”，将y设为空节点。 x ← root[T] // 设“红黑树T”的根节点为“x” while x ≠ nil[T] // 找出要插入的节点“z”在二叉树T中的位置“y” do y ← x if key[z] &amp;lt; key[x] then x ← left[x] else x ← right[x] p[z] ← y // 设置 “z的父亲” 为 “y” if y = nil[T] then root[T] ← z // 情况1：若y是空节点，则将z设为根 else if key[z] &amp;lt; key[y] then left[y] ← z // 情况2：若“z所包含的值” &amp;lt; “y所包含的值”，则将z设为“y的左孩子” else right[y] ← z // 情况3：(“z所包含的值” &amp;gt;= “y所包含的值”)将z设为“y的右孩子” left[z] ← nil[T] // z的左孩子设为空 right[z] ← nil[T] // z的右孩子设为空。至此，已经完成将“节点z插入到二叉树”中了。 color[z] ← RED // 将z着色为“红色” RB-INSERT-FIXUP(T, z) // 通过RB-INSERT-FIXUP对红黑树的节点进行颜色修改以及旋转，让树T仍然是一颗红黑树</description>
    </item>
    
    <item>
      <title>Three.js Learning Note</title>
      <link>https://ethannote.github.io/CTW/posts/threejs/</link>
      <pubDate>Tue, 04 Sep 2018 00:25:28 +0800</pubDate>
      
      <guid>https://ethannote.github.io/CTW/posts/threejs/</guid>
      <description>Page &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=utf-8&amp;gt; &amp;lt;title&amp;gt;My first three.js app&amp;lt;/title&amp;gt; &amp;lt;style&amp;gt; body { margin: 0; } canvas { width: 100%; height: 100% } &amp;lt;/style&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;script src=&amp;#34;js/three.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt; // Our Javascript will go here. 	&amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; Scene var scene = new THREE.Scene(); var camera = new THREE.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, 0.1, 1000 ); var renderer = new THREE.WebGLRenderer(); renderer.setSize( window.innerWidth, window.innerHeight ); document.body.appendChild( renderer.domElement ); var geometry = new THREE.</description>
    </item>
    
    <item>
      <title>Getting start with Coder theme</title>
      <link>https://ethannote.github.io/CTW/posts/hugo_theme_coder/</link>
      <pubDate>Sun, 02 Sep 2018 17:43:33 +0800</pubDate>
      
      <guid>https://ethannote.github.io/CTW/posts/hugo_theme_coder/</guid>
      <description>Coder主题十分简洁，基础功能健全，配置简单。
主题仓库中附带配置文件，拿来即可用。
问题及解决方法(Windows) Post列表日期错误，且无法显示各post标题 检查 meta 是否含有多余空格。slug 配置所在行末尾有空格，导致解析错误。如果完全不需要slug，可以直接在 archetypes/posts.md 中将其删除
Hugo 版本不支持 x-scss 下载扩展板Hugo
源代码语法高亮 (function(){ console.log(&amp;#34;Hello, world!&amp;#34;); }).();  使用 highlightjs &amp;lt;pre&amp;gt;&amp;lt;c&amp;gt; (function(){ console.log(&amp;#34;Hello, world!&amp;#34;); }).(); &amp;lt;/c&amp;gt;&amp;lt;/pre&amp;gt;  (function(){ console.log(&#34;Hello, world!&#34;); }).();  English looks better The default language is English, and it looks much more comfortable. Maybe it is a good idea to leave the most content to programming code. And you can see this text has an equal-width font, quite similar to console output, which is another cause of Chinese-hostile.</description>
    </item>
    
  </channel>
</rss>